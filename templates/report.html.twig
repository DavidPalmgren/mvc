{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="container">
    <div class="row">
      <div class="col-md-2">
        <h1>Links</h1>

        <ul class="list-group">
            <li class="list-group-item"><a href="#kmom01">Kmom01</a></li>
            <li class="list-group-item"><a href="#kmom02">Kmom02</a></li>
            <li class="list-group-item"><a href="#kmom03">Kmom03</a></li>
            <li class="list-group-item"><a href="#kmom04">Kmom04</a></li>
            <li class="list-group-item"><a href="#kmom05">Kmom05</a></li>
            <li class="list-group-item"><a href="#kmom06">Kmom06</a></li>
            <li class="list-group-item"><a href="#kmom07">Kmom07</a></li>
        </ul>

      </div>

      <div class="col-md-6">
        <h1>Reports</h1>

        <div class="card">
            <div class="card-body">
            <h2 id="kmom01">Kmom01</h2>
            <p>Vi har arbetat med det tidigare i oopython kursen men annars har jag nog ingen erfarenhet av det tror jag, det är väl mer så att man ska arbeta med klasser och göra objekt typ som jag förstår oo hittils.</p>
            <p>För att skapa en klass i php behöver man bara använda syntaxen sen kan man fylla på sin class mall med metoder attribut och sådant. Ett objekt är en instans av en klass tpy kopia av mallen som man fyller i med informationen man matat in. Jag märker inga markanta skillnader mellan typ python/php objekt det verkar vara väldigt likt bara litet syntax skillnad typ</p>
            <p>När jag först gjorde skelettet så blev jag rätt shockad på hur mycket saker det fanns och så men vi använder inte allting precis det är typ samma mängd som i andra kurser när vi gjort sånna sidor så det var lite överväldigande i början. Men det är väl en rätt logisk struktur som liknar sånt vi gjort förut i alla fall så det är väl bra.</p>
            <p>Kan inte säga att jag läst igenom mycket av den artiklen bara lite översiktligt kollat igenom den snabby men jag kollade lite igenom templating med twig för att friska upp minnet om det vilket var nyttigt samt lite om hur komments på kod ser ut vilket var intressant kanske det var inte olikt sådant vi kollat på förrut. läste även lite om Secruty, data filtrering, bara för att förstå lite vad det handlade om det var också hyggligt intressant då jag inte redigt tänkt mycket på sidans säkerhet hitills. Ett interface är typ en sammling av metoder som en klass behöver implementera typ ett löfte om att dessa klasserna ska innehålla de metoder som listats i interfacet. Trait är väl typ ett sätt att återanvända och lägga till gemensamma beetende mellan klasser.</p>
            
            <p>TIL: lärde mig lite om hur mvc ser ut i php och lite mapp orientering av vår arbetsmiljö för denna kursen. Så lärt mig hur jag kan göra routes friskat upp minnet med twig templates kört lite mer bootstrap lekt lite med js och sånt.</p>
            </div>

        </div>
        <div class="card">
            <div class="card-body">
                <h2 id="kmom02">Kmom02</h2>
                <p>Arv är en teknik som möjligör att en klass kan ta egenskaper från en annan klass som är parent, medans klassen som ärver är child. Komposition är liksom där en annan klass består av en del av en annan klass? typ som Deck som har en samling Card's tillskillnad från typ graphicCard som är ett Card.</p>
                <p>Jag gjorde en Card klass med suit/rank mönster/värde och sedan en CardDeck som innehöl de Card's samt en CardGraphic som stod för den visuella delen, blev mest vanliga tecken med några tecken för mönster. Det var inget speciellt konstigt med övning det tog en del tid men det var mycket likt det vi gjorde i oopython, jag hade lite svårt för att fixa get/post/session i php men det gick sedan. Jag bara implementerade delarna vi behövde deck,shuffle,draw,number och det gick mestadels utan problem, om jag hade velat ändra på något så vore det väl korten dem är lite tråkiga men jag har halkat efter lite så jag ville inte lägga för mycket tid på det.</p>
                <p>Det känndes okej, jag tänkte inte på det jätta mycket direkt. Men det är bra för att få bra struktur på programmen och pseudokod är nice för brainstormning och man behöver bara tänka på funktioner och inte nödvändigtvist implementation själv är jag varken bra på att strukturera eller tänka på vad jag kommer behöva så det är väl ett arbetsätt jag borde försöka implementera själv då jag ofta saknar en plan och bara tar det som det kommer för det mesta.</p>
                <p>Jag lärde mig en hel del om oop i php och i alla fall en grundlig förståelse för saker som arv, komp, interface och trait mer om hur man kan bygga dessa api sidorna.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="kmom03">Kmom03</h2>
                <p>Det känndes rätt bra att arbeta med flödeschema och pseudokod det hjälpte rätt mycket med att få igång en bra start och om jag tappar var jag är i prossesen så kunde jag gå tillbaka och kolla var jag var i programmering vilket hjälpte rätt mycket, tror jag tänker fortsätta med det något kanske inte så pass att jag gör ett schema av det men en snabb ritning med papper och penna.</p>
                <p>Jag löste uppgiften genom att skapa en spel klass och en participant klass som representerade spelaren och bankiren som var byggd av spelaren som grund fast igentligen så behövde jag inte redigt göra separat klass för bankiren men tänkte det kunnde vara bra att ha om jag skulle ändra beteendet imellan dem i alla fall, jag tyckte det var rätt simpelt i början men ju mer jag arbetade desto mer engångs metoder blev det vilket jag inte var helt nöjd med och kod kvaliten blev sämmre som jag såg det men jag vet inte redigt, jag är endå rätt nöjd om det var något jag var lite mindre nöjd med så är det grafiska delen jag ville gärna ha svg korten men jag klurade inte ut just hur jag kunde få det att funka så jag nöjde mig med utf8 karaktärer vilket endå var en uppgradering ifrån förra uppgiften.</p>
                <p>Det känns rätt bra att programmera i symfony just nu det är inte särskiltl annorlunde ifrån det vi gjort tidigare och jag har börjat vänja mig lite mer med hur man använder namespace use och annat i php nu.</p>
                <p>TIL något som jag tyckte var intressant under denna uppgiften vore väl alla tools man kan skaffa för att hjälpa en att arbeta vi har användt det förut i viss utsträckning men jag tyckte denna lintern var rätt intressant i alla fall och det var mer intressant då vi fixade paketen "själva" iaf phpmd och phpstan var rätt hårda programm och jag fick fixa rätt mycket och bara att läsa igenom fel meddelanden som man fick så lärde man sig en hel del om vilken kod standard som dem förväntar sig liksom</p>
                
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="kmom04">Kmom04</h2>
                <p>Det var nästan faktiskt rätt roligt blev nästan lite beroende av det gröna ljuset på Dashboarden efter ett tag, det var ett väldigt bra verktyg för att kunna visuallisera vilka delar som koden går igenom och var därför enklare att skriva ut nya tester och man kunde enkelt se om det var något exception eller if sats som man inte kom in i med testen. Det var ett redigt coolt verktyg.</p>
                <p>Jag nådde 94% på code och methods och typ 80% linje på card som jag gjorde först men jag var lite mer petig med att få allt grönt på Game klassen så fick det till 100/100 men fick skriva rätt mycket mer skumma fall som inte redigt inträffar och fick lägga till lite nya metoder för att göra testningen enklare.</p>
                <p>Det känndes som att de mesta metoderna var testbara men man fick pilla lite för att komma in i vissa if satser och så men mycket av min game class körs automatiskt så det gick rätt enkelt att gå igenom mycket av koden men för att få ut vissa resultat fick jag gå in och sätta varenda kort och kalla på flertal funktioner för att få ut rätt resultat.</p>
                <p>Valde inte att skriva om några delar av koden men jag la till några funktioner som hjälpte mig att testa snabbare så att jag direkt kunned sätta en vinnare t.ex. och sådant vilket gjorde vissa tester mycket enklare att uppnå istället för att simulera ett helt spel i kommandon.</p>
                <p>Är inte helt säker på sammanknytningen mellan testbar kod och snygg och ren jag upplevde att min kod var hyggligt lätt att skriva testfall för men vore nog mycket knepigare för någon som inte suttit och skrivit koden själv att testa jag har en viss idee om hur man uppfyller dem olika kraven för att testa fallen och det "makes sense" för mig då jag typ redan spenderat en bra tid på att felsöka spelet under föregående kmom. Men det är väl säkert så att testbar kod kan identifieras som snygg kod kod.</p>
                <p>Lärde mig om lite nya php verktyg igen phpunit och phpdoc var båda rätt najs verktyg hade redan kommenterat ut min kod sedan föregående men phpunit var rolig att jobba med och har fått en ny uppskattning för att göra testfall och lärt mig en del nya assertsmetoder</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="kmom05">Kmom05</h2>
                <p>Det gick rätt bra det var snabbt att sätta upp allting för databasen med doctrines terminal programm känndes som att skriva pseudokod typ och så sätter dem upp allting åt en efter en beskrivning sedan vill man ändra något så kan man gå in och göra det manuellt om det känns enklare. Jag hade lite svårt att förstå det här up down med versionerna men efter jag hade lagt till ett nytt fält för beskrivning av boken så fick jag lära mig en hel del migrationen ville inte gå igenom och jag hade 3st migrationer som inte hade blivit uppladdade så fick leta mig fram till en lösning för att släppa dem failade migrationerna och börja om med migrationerna ifrån current det var lite petigt men endå ett väldigt bra sätt att ha många backups och flera versioner så man behöver inte oroa sig jätte mycket om man gör något helt knasigt.</p>
                <p>Jag tänkte att jag gör [readmany] som en landnigsida så man snabbt fick en bra uppsikt av alla böckerna som fanns där och sedan kan man klicka på böckerna för att komma till [readONe] där kan man se lite mer information som isbn10 nummret och en beskrivning om den har en tillagd i databasen, inne på read_one så kan man även manipulera boken genom antingen updatera eller radera knappar som finns och det var ungefär så jag försökt knyta ihop programmet och göra det lite mer flytande istället för en lista med länkar. Just det [CREATE] finns som en knapp på landnigssidan också!</p>
                <p>Det var lite jobbigt till en början men sedan så tyckte jag det känndes rätt okej det var bara att förstå lite vad repository och entity och alla dessa grejerna gjorde och så gick det fint, tror endå i regel jag tyckte det var enklare att jobba med mariadb som vi gjorde i föregående kursen dock hitills har vi inte gjort jätte svåra grejer i orm än men känns i alla fall som att det kan bli lite jobbigare om man vill göra lite mer komplicerade grejer med flera joins osv alltså skriva våra egna funktioner i libraryRepository ser ut att bli lite jobbigt men får se. Annars var det för det mesta enkelt att börja köra igång med doctrine orm gick väldigt snabbt och känndes oki och crud var väldigt enkelt med det hade ju alla grejerna i libraryRepository och sedan bara att kalla funktioner typ samma vi gjorde för kortspelet kmom03.</p>
                <p>ORM med doctrine känndes väldigt typ lightweight vet inte om det är rätt ord men det känndes väldigt enkelt att komma igång efter en stund och jämfört med andra sätt så skrev jag noll sql kod vilket man kan tolka som trevligt det vara bara jobba med objekt istället och med doctrines terminal kunnde man bara skriva in det man ville ha i tabellen så skötte den resten vilket var väldigt trevlight bara skriva in lite saker sen generar den alla getset metoderna och attributen osv efter mina inputs i terminalen.</p>
                <p>Jag lärde mig en del saker med att arbeta med doctrine det var ett annat sätt att jobba emot en databas än det vi har gjort tidigare och det var intressant att man även kunne göra det med objekt liksom. CRUD var snabbt och simpelt i doctrines orm grej, migrations Versioner var smått drygt men känndes bra att ha då något gick åt skogen och enkelt att återställa till fungerade version igen genom --down och så.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="kmom06">Kmom06</h2>
                <p>Det var ännu ett rätt heftigt verktyg fast det var lite så för mycket information för att man skulle kunna ta in allting på ett bra sätt, jag tyckte dock att själva översikten på ens programm var väldigt smidigt och den visa enkelt upp om man hade några violations/errors, Average cyclomatic complexity by class, Maintainability / complexity och average bugs by class och mer liksom, men ja det visade lite översikligt hur det går för programmet man skrivit vilket är bra. </p>
                <p>Det gick bra att sätta upp scrutinizer men det tog lite längre tid än jag hade förväntat mig men setupen trodde nästan den hade fastnat eller något, jag vet inte vad jag tycker redigt om badges jag hade fått en typ 9.5 från början och efter jag hade fixat till mina 2st B metoder så fick jag en 10.00 badge och sen coverage är på 29% men jag tänkte inte fylla på mer där då det bara är dice spel och annat orelaterat igentligen men om jag ville satsa mer på coverage kunnde jag väl gjort en testklass för tjugoettControllen kanske men inte säker hur man ska testa det då den arbetar med post routes och sånt för att få resultat idk.</p>
                <p>Jag vet inte redigt vad jag tycker är kvalitekod men typ funktionell kod som inte är överkomplicerande försöka hålla lågt med nestlingar och if satser och om funktionen blir för stor kan man bryta ut den. Man ska tänka på vilket syfte en klass har när man implementerar den kasnke. Tror inte badges är något slags absolut värde för kod kvalite men det kan vara bra som en grund, har man väldigt låga poäng på sidan så har man antagligen gjort något fel och ett sådant här programm kan vara bra för att kolla efter sådant.</p>

            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="kmom07">Kmom07</h2>
                <p>This is the report for Kmom07.</p>
            </div>
        </div>

      </div>
    </div>
</div>

{% endblock %}