{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<div class="container">
    <div class="row">
      <div class="col-md-2">
        <h1>Links</h1>

        <ul class="list-group">
            <li class="list-group-item"><a href="#Introduktion">Introduktion</a></li>
            <li class="list-group-item"><a href="#Phpmetrics">Phpmetrics</a></li>
            <li class="list-group-item"><a href="#Scrutinizer">Scrutinizer</a></li>
            <li class="list-group-item"><a href="#6c-Findings">6c-Findings</a></li>
            <li class="list-group-item"><a href="#Förbättringar">Förbättringar</a></li>

        </ul>

      </div>

      <div class="col-md-6">
        <h1>Reports</h1>

        <div class="card">
            <div class="card-body">
                <h2 id="Introduktion">Introduktion</h2>
                <p><strong>Codestyle:</strong> Codestyle menar typ att följa guidelines och normer som jag förstått det tanken är att man ska följa dessa guidelines så det blir enklare att förstå så att typ en ny kan komma in och inte vara helt vilse.</p>
                <p><strong>Coverage:</strong> Är hur bra koden är täckt av test cases linjer,filer klasser metoder osv. Det är då bra att ha en stor täckning så man vet att koden funkar.</p>
                <p><strong>Complexity:</strong> Står för hur komplicerat saken är om jag kollar på mina klasser så ser jag att player och tjugoettkontroller/tjugoettgame är högt uppe vilket känns rätt då det är sammlingspunkter som allt möjligt går in i som player, card, deck osv typ main spelet alltså. Komplexiteten verkar bero mycket på hur många conditions och vägar den kan gå liksom, hög komplexitet kan göra det svårare att skriva tester som jag själv märkt man får göra väldigt specifika test cases för att komma in i alla if/else osv.</p>
                <p><strong>Cohesion/lcom:</strong> Cohesion kollar hur bra klasser sticker ihop med varandra och fungerar tillsammans. Ett lågt värde menar då att komponenterna är högt sammanbundna? inom lcom</p>
                <p><strong>Coupling:</strong> Coupling handlar om hur klassen använder/används av andra klasser, AC: är numret av klasser som använder denna output typ. EC: Är klasser som ger till denna klassen input typ.</p>
                <p><strong>CRAP:</strong> CRAP står för Change Risk Anti-Patterns den räknar ut hur mycket tid och arbeta det tar för att fixa crappy methods, om jag kollar på mina egna crappiga så kan jag se att min highscore är från libraryController::updateLibrary() då jag skrev in en del ifsatser för att skriva default värden om det var tomt och lite annat så det blir mkt testcases om man vill reducera crap scoren.</p>
            </div>

        </div>
        <div class="card">
            <div class="card-body">
                <h2 id="Phpmetrics">Phpmetrics</h2>
                <div style="width: 500px; overflow: auto;">
                    <img src="{{ asset('img/phpmetricsreport.png') }}" alt="" width="" height="">
                  </div>

                  <div style="width: 500px; overflow: auto;">
                  <img src="{{ asset('img/PhpMetrics maintainability _ complexity.png') }}" alt="" width="500" height="500">
                  </div>
                  <p>Här är det dessa tre som representerar dem 3 yttersta cirklarna med från #1, Cyclomatic Complexity14, 54.27maintanability, CC12, 71m, cc12, 52m </p>
                  <p>Svårt att hitta någon individuell grej med phpmetrics så sätter mitt mål på att försöka fina upp dessa klasserna och sedan se om någon metod kan fixas till för att försöka förbättra dessa något.</p>

            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="Scrutinizer">Scrutinizer</h2>
                <a href="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality">
                </a>
            
                <a href="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/badges/coverage.png?b=main" alt="Code Coverage">
                </a>
            
                <a href="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/build-status/main">
                    <img src="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/badges/build.png?b=main" alt="Build Status">
                </a>
            
                <a href="https://scrutinizer-ci.com/code-intelligence">
                    <img src="https://scrutinizer-ci.com/g/DavidPalmgren/mvc/badges/code-intelligence.svg?b=main" alt="Code Intelligence Status">
                </a>
                <br><br>
                <div>
                <img src="{{ asset('img/phpscrutinizerreport.png') }}" alt="" width="" height="">
                </div>
                <p>Sedan kan vi lägga till updateLibrary för den hade högt crap värde varför inte, gick igenom varför lite innan.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="6c-Findings">6c-Findings</h2>
                <p>Så dessa 3 klasserna stog ur rätt mycket inom typ alla tester för det mesta, högst complexity, med högst conditions, komplexitet med path antal osv, särskillt stog min kontroller ut också phpmetric flagga min TjugeEttGame som ett Godobjekt vilket ja typ är rätt beskrivande så det vore något att förbättra kanske men är lite osäker om det är så himmla fel tanken när jag gjorde spelet var att tillkalla alla andra delar igenom den och sköta själva spelet där vet inte redigt.</p>
                <p>På dem specifika delarna under scrutinizer så var playerStands() och getHandValue() dem sämsta, det är rätt stort med if satser i dem båda och andra grenande delar och nestalingar så det förklarar sig självt typ. PlayerStands har rätt mycket skit då den handterar auto spelningen efter det att spelaren slutat ta nya kort.</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h2 id="Förbättringar">Förbättringar</h2></div>
                <p><strong>Plan?</strong></p>
                <p>Jag tänker att jag tar dem 2 klasserna som var utpekade som B till en början och sedan efter det så kollar jag på lite andra mindre grejer som går att fixa typ ratingen på scrutinizer så jag får den till en 10 och sedan förbättrar mina "planeter" från phpMetrics så mina tre värsta blir lite bättre i både cc och maintainability.</p>
                <p><strong>Player::getHandValue</strong></p>
                <p>Jag väljer att fixa till getHandValue till en början och fixar den så att den evalueras som A också.</p>
                <p>Det gick rätt bra jag bröt ut en av while looparna jag hade till en istället och gjorde en else if vilket verkade ge ett bättre resultat från scrutinizer.</p>
                <div style="width: 500px; overflow: auto;">
                    <img src="{{ asset('img/scrutinizerA.png') }}" alt="" width="" height="">
                    </div>
                    <br>
                    <p><strong>TjugoEttGame::playerStands</strong></p>
                    <p>Jag tar denna som den andra att fixa vilket passar bra den var lite för komplex och jobbig med många if satser.</p>
                    <p>Jag tar och bryter ut delar av logiken till en ny metod som heter shouldPlayerWin vilket kollar vinst konditions åt playerstands och gör playerStands mer simpel att läsa och mindre komplex.</p>
                    
                    <div style="width: 500px; overflow: auto;">
                        <img src="{{ asset('img/scrutinizerB.png') }}" alt="" width="" height="">
                        </div>
                        <p>När jag endå hållar på så gör jag en testcase för min nya helper metod och kollar att allt funkar och sådant bra.</p>
                        <div style="width: 500px; overflow: auto;">
                            <img src="{{ asset('img/scrutinizerC.png') }}" alt="" width="" height="">
                            </div>
                            <br>
                    <p><strong>Cyclomatic Complexity(CC) fix och annat komplimenterande</strong></p>
                    <p>Jag beslutar mig för att förbättre mina 3 värsta klasser på dessa problem.</p>
                    <p>Tar och börjar med CardDeck och tar bort en oanvänd metod vilket minskade CC12 till CC8 men gjorde inte särskillt stor skillnad på maintainabilityn jag simplifierar min getcardbysuit and rank som hjälper min sort funktion vilket även förbättrar värdet.</p>
                    
                    <p>Efter allt lyckades jag få ner dem ifrån 14 till 11, 12 till 10 och 12 till 10 på tjugoEttGame, cardDeck, player. Jag sitter och klurar ett tag men jag har svårt att hitta något som jag skulle kunna förenkla vid detta laget så jag nöjer mig med det som de är nu har trotts allt lyckats få ner dem 3 klasserna cyklomatiska komplexitet men en hel del. </p>
                    
                    <strong>Maintainability: </strong>
                        <p>Nu lägger jag ner lite mer fokus på kommentarer då detta också påverkar maintainability de flesta fick då en rätt stor buff på maintainabilityn förutom player som redan var rätt bra kommenterat</p>
                        <p>TjugoEttGame: från runt 50 till 71, CardDeck: från 49 till 78, Player: från 71 till 77</p>
                        <p>Efter detta så blev dem 3 utvalde upp till gul färg i alla fall vilket var rätt mycket bättre än utgångsläget</p>
                        <div style="width: 500px; overflow: auto;">
                            <img src="{{ asset('img/PhpMetrics maintainability _ complexity (1).png') }}" alt="" width="500" height="500">
                            </div>
                    
                    <strong>Ökar Indexvärdet för scrutinizer</strong>
                    <p>Jag går igenom och gör lite små ändringar i allt möjligt tar väck gammla oanvända funktioner onödiga kommentarer simplifierar funktioner där jag kan tills scurtinizer ger mig en 10a, från typ 9.+~ något som var utgångspunkten</p>
                    <div style="width: 500px; overflow: auto;">
                        <img src="{{ asset('img/scrutinizerD.png') }}" alt="" width="" height="">
                        </div>
                        <strong>Issues</strong>
                        <p>Det finns några issues så fixar det som verkar behövas</p>
                        <div style="width: 500px; overflow: auto;">
                            <img src="{{ asset('img/scrutinizerE.png') }}" alt="" width="" height="">
                            </div>
                        <div class="card">
                            <div class="card-body">
                                <h2 id="Diskussion">Diskussion</h2>
                                <p>Det blir nog lite jobbigt om man aktivt sitter och tänker på "clean code" och jag tror inte att en sida kan objektivt utvärdera en kod och det enligt mig kanske bara pekar en åt rätt riktning då det är ju viktigt att kunna göra maintainbar och snygg kod då den som kommer efter en annars kommer få slita och så. Nja är lite osäker men man borde i alla fall använda det som en grund i alla fall och om saker ser rejält tokigt ut på testet borde man nog fixa till det och om man tänker på att koden ska vara snyff och tillgänglig osv ifrån det att man börjar får man nog mycket bättre resultat. Nackdelar vore att det tar lite extra tid om man har klurat ut ett sätt men bestämmer att det är för komplext eller så och fördelar vore att man gör det enklare för sig själv i framtiden att komma tillbaka och förstå vad man gjort samt för andra att förstå koden. Det bästa man kan göra är väl att tänka till lite extra innan man börjar skriva koden och se till att det är redan kommenterat inte över komplicerat och att klasser och metoder är utdelade på ett bra sätt osv så slipper man problem.</p>
                            </div>
                        </div>
        </div>



      </div>
    </div>
</div>

{% endblock %}